{
  "ANL": {
    "detail": "Bitwise AND",
    "description": "Performs a bitwise AND operation between operands.\r\n\r\nDoes not affect value of second operand.",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        },
        {
          "operand": 8,
          "when_first_is": 0
        },
        {
          "operand": 5,
          "when_first_is": 0
        }
      ],
      [
        {
          "operand": 12,
          "when_first_is": 5
        },
        {
          "operand": 6,
          "when_first_is": 12
        },
        {
          "operand": 9,
          "when_first_is": 8
        },
        {
          "operand": 3,
          "when_first_is": 5
        },
        {
          "operand": 3,
          "when_first_is": 12
        },
        {
          "operand": 10,
          "when_first_is": 8
        },
        {
          "operand": 7,
          "when_first_is": 12
        }
      ]
    ],
    "affected_flags": [],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "ORL": {
    "detail": "Bitwise OR",
    "description": "Performs a bitwise OR operation between operands.\r\n\r\nDoes not affect value of second operand.",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        },
        {
          "operand": 8,
          "when_first_is": 0
        },
        {
          "operand": 5,
          "when_first_is": 0
        }
      ],
      [
        {
          "operand": 12,
          "when_first_is": 5
        },
        {
          "operand": 6,
          "when_first_is": 12
        },
        {
          "operand": 9,
          "when_first_is": 8
        },
        {
          "operand": 3,
          "when_first_is": 5
        },
        {
          "operand": 3,
          "when_first_is": 12
        },
        {
          "operand": 10,
          "when_first_is": 8
        },
        {
          "operand": 7,
          "when_first_is": 12
        }
      ]
    ],
    "affected_flags": [],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "XRL": {
    "detail": "Bitwise XOR",
    "description": "Performs a bitwise XOR operation between operands.\r\n\r\nDoes not affect value of second operand.",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        },
        {
          "operand": 8,
          "when_first_is": 0
        },
        {
          "operand": 5,
          "when_first_is": 0
        }
      ],
      [
        {
          "operand": 12,
          "when_first_is": 5
        },
        {
          "operand": 6,
          "when_first_is": 12
        },
        {
          "operand": 9,
          "when_first_is": 8
        },
        {
          "operand": 3,
          "when_first_is": 5
        },
        {
          "operand": 3,
          "when_first_is": 12
        },
        {
          "operand": 10,
          "when_first_is": 8
        },
        {
          "operand": 7,
          "when_first_is": 12
        }
      ]
    ],
    "affected_flags": [],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "CLR": {
    "detail": "Clear",
    "description": "Clear (set to 0) value of the Accumulator, the Carry flag or a bit in RAM",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        },
        {
          "operand": 9,
          "when_first_is": 0
        },
        {
          "operand": 8,
          "when_first_is": 0
        }
      ]
    ],
    "affected_flags": [],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "CPL": {
    "detail": "Complement",
    "description": "Complements (reverses) value of the Accumulator, the Carry flag or a bit in RAM.\r\nThe Carry flag or bit in RAM is:\r\n - unset if it was set\r\n - set if it was unset\r\n\r\nEach bit in the Accumulator is subjected to the same operation as Carry flag or bit in RAM.\r\n\u003E If value of Accumulator was 10101001 then it will be set to 01010110",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        },
        {
          "operand": 9,
          "when_first_is": 0
        },
        {
          "operand": 8,
          "when_first_is": 0
        }
      ]
    ],
    "affected_flags": [],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "RL": {
    "detail": "Rotate left",
    "description": "Shifts bits of value stored in the Accumulator to the left.\r\n\r\nThe most significant bit is moved to the least significant bit.",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        }
      ]
    ],
    "affected_flags": [],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "RLC": {
    "detail": "Rotate left trough Carry flag",
    "description": "Shifts bits of value stored in the Accumulator to the left trough the Carry flag.\r\n\r\nValue of the Carry flag is moved to the least significant bit of the Accumulator.\r\n\r\nThe most significant bit is moved to the Carry flag.\r\n\r\nCan be used to multiply number by 2",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        }
      ]
    ],
    "affected_flags": [
      {
        "flag": 7,
        "when_set": "",
        "when_unset": ""
      }
    ],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "RR": {
    "detail": "Rotate right",
    "description": "Shifts bits of value stored in the Accumulator to the right.\r\n\r\nThe least significant bit is moved to the most significant bit.",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        }
      ]
    ],
    "affected_flags": [],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "RRC": {
    "detail": "Rotate right trough Carry flag",
    "description": "Shifts bits of value stored in the Accumulator to the right trough the Carry flag.\r\n\r\nValue of the Carry flag is moved to the most significant bit of the Accumulator.\r\n\r\nThe least significant bit is moved to the Carry flag.\r\n\r\n\r\nCan be used to divide number by 2",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        }
      ]
    ],
    "affected_flags": [
      {
        "flag": 7,
        "when_set": "",
        "when_unset": ""
      }
    ],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "SWAP": {
    "detail": "Swap nibbles of the Accumulator",
    "description": "Swap the most significant nibble of the Accumulator with the least significant nibble.\r\n\r\nEnd result will be the same as rotating Accumulator value 4 times.",
    "valid_operands": [
      [
        {
          "operand": 12,
          "when_first_is": 0
        }
      ]
    ],
    "affected_flags": [],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  },
  "SETB": {
    "detail": "Set Bit",
    "description": "Set a specified bit",
    "valid_operands": [
      [
        {
          "operand": 9,
          "when_first_is": 0
        },
        {
          "operand": 8,
          "when_first_is": 0
        }
      ]
    ],
    "affected_flags": [],
    "dont_generate_syntax": false,
    "dont_duplicate_in_all_docs": false,
    "prefix": "",
    "prefix_required": false
  }
}